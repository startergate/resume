{"version":3,"sources":["webpack:///./src/util/classToggler.ts","webpack:///./src/components/projects/filter.tsx","webpack:///./src/pages/projects.tsx"],"names":["toggle","target","className","classList","contains","remove","add","Filter","filterHandler","data","defaultTitle","props","updateSelected","selected","document","querySelectorAll","id","map","element","textContent","querySelector","innerHTML","join","select","event","currentTarget","onClick","selector","title","key","forEach","item","Projects","useStaticQuery","projects","allProjectsJson","nodes","badgeData","linksJson","types","type","distinct","tags","status","selecteds","handler","temp","length","filter","x","tag","includes","onLoad","addEventListener","e","projectFilterTags","projectFilterTypes","projectFilterStatus","value","path","index"],"mappings":"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","file":"component---src-pages-projects-tsx-0a338fb844605483ad05.js","sourcesContent":["const toggle = (target, className) => {\n  target.classList.contains(className)\n    ? target.classList.remove(className)\n    : target.classList.add(className);\n};\n\nexport default toggle;\n","import * as React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport toggle from '../../util/classToggler';\n\nimport './filter.css';\n\nconst Filter = ({ filterHandler, data, defaultTitle, ...props }) => {\n  const updateSelected = () => {\n    let selected: any = document.querySelectorAll(\n      `#${props.id} .project-filter-choice-activated`\n    );\n    selected = [...selected].map((element) => element.textContent);\n    document.querySelector(`#${props.id} .project-filter-display`).innerHTML =\n      selected.join(', ') || defaultTitle;\n    filterHandler?.(selected);\n  };\n\n  const reset = () => {\n    document\n      .querySelectorAll(`#${props.id} .project-filter-choice-activated`)\n      .forEach((element) => {\n        element.classList.remove('project-filter-choice-activated');\n      });\n    updateSelected();\n  };\n\n  const select = (event) => {\n    toggle(event.currentTarget, 'project-filter-choice-activated');\n    updateSelected();\n  };\n\n  return (\n    <div className={'project-filter'} {...props}>\n      <p\n        onClick={() => {\n          const selector = document.querySelector(\n            `#${props.id} .project-filter-selector`\n          );\n          toggle(selector, 'hidden');\n        }}\n        className={'project-filter-display'}\n        title={'눌러서 필터 변경'}\n      >\n        {defaultTitle}\n      </p>\n      <ul className={'project-filter-selector hidden'}>\n        <li\n          key={`${props.id}-all`}\n          onClick={reset}\n          className={'project-filter-choice'}\n        >\n          필터 초기화\n        </li>\n        <ul className={'project-filter-choice-list'}>\n          {data.map((item) => {\n            return (\n              <li\n                key={item}\n                onClick={select}\n                className={'project-filter-choice'}\n              >\n                {item}\n              </li>\n            );\n          })}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n\nexport default Filter;\n","import * as React from 'react';\nimport { useStaticQuery, graphql, PageProps, Link } from 'gatsby';\n\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport Project from '../components/projects/simple';\n\nimport './projects.css';\nimport Filter from '../components/projects/filter';\nimport * as External from '../components/profiles/external';\nimport Overlay from '../components/projects/overlay';\n\nconst Projects = (props: PageProps) => {\n  const data = useStaticQuery(graphql`\n    query getProjectData {\n      allProjectsJson(\n        sort: { fields: [isHighlighted, orderLevel, name], order: [DESC, ASC] }\n      ) {\n        nodes {\n          id\n          name\n          description\n          collaborators {\n            name\n            roles\n          }\n          startedAt\n          finishedAt\n          status\n          type\n          tags\n          images {\n            src\n            description\n          }\n          links {\n            type\n            link\n            external_id\n          }\n          imgSrc\n          imgSrcOnLightMode\n          imageIsTitle\n          owner {\n            name\n            link\n          }\n          contents {\n            title\n            image\n            ref\n            text\n          }\n        }\n      }\n      tags: allProjectsJson {\n        distinct(field: tags)\n      }\n      type: allProjectsJson {\n        distinct(field: type)\n      }\n      status: allProjectsJson {\n        distinct(field: status)\n      }\n      linksJson(type: { eq: \"GitHub\" }) {\n        id\n        type\n        external_id\n        link\n      }\n    }\n  `);\n\n  const projects = data.allProjectsJson.nodes;\n  const badgeData = data.linksJson;\n  const types = data.type.distinct;\n  const tags = data.tags.distinct;\n  const status = data.status.distinct;\n  const selecteds = {\n    types: [],\n    tags: [],\n    status: [],\n  };\n\n  const handler = () => {\n    let temp =\n      selecteds.tags.length > 0\n        ? projects.filter(\n            (x) => x.tags.filter((tag) => selecteds.tags.includes(tag)).length\n          )\n        : projects;\n    temp =\n      selecteds.types.length > 0\n        ? temp.filter(\n            (x) =>\n              x.type.filter((type) => selecteds.types.includes(type)).length\n          )\n        : temp;\n    temp = (selecteds.status.length > 0\n      ? temp.filter((x) => selecteds.status.includes(x.status))\n      : temp\n    ).map((x) => x.id);\n    let elements = document.querySelectorAll('.project-card');\n    elements.forEach((element) => {\n      element.classList.remove('hidden');\n      if (!temp.includes(element.id)) {\n        element.classList.add('hidden');\n      }\n    });\n  };\n\n  const tagHandler = (selected) => {\n    selecteds.tags = selected;\n    handler();\n  };\n\n  const typeHandler = (selected) => {\n    selecteds.types = selected;\n    handler();\n  };\n\n  const statusHandler = (selected) => {\n    selecteds.status = selected;\n    handler();\n  };\n\n  return (\n    <Layout {...props}>\n      <SEO title={'Projects'} />\n      <section\n        className={'subpage'}\n        onLoad={() =>\n          document.addEventListener('click', (e) => {\n            const projectFilterTags = document.querySelector(\n              '#project-filter-tags'\n            );\n            const projectFilterTypes = document.querySelector(\n              '#project-filter-types'\n            );\n            const projectFilterStatus = document.querySelector(\n              '#project-filter-status'\n            );\n\n            if (\n              ![\n                projectFilterTags,\n                projectFilterTypes,\n                projectFilterStatus,\n              ].filter((value) => e.path.includes(value)).length\n            ) {\n              projectFilterTags\n                .querySelector('.project-filter-selector')\n                .classList.add('hidden');\n              projectFilterTypes\n                .querySelector('.project-filter-selector')\n                .classList.add('hidden');\n              projectFilterStatus\n                .querySelector('.project-filter-selector')\n                .classList.add('hidden');\n            }\n          })\n        }\n      >\n        <div className={'page-title'}>\n          <h1>\n            <span>Projects</span>\n          </h1>\n          <External.Small data={badgeData} />\n        </div>\n        <div className={'project-filters'}>\n          <Filter\n            filterHandler={tagHandler}\n            data={tags}\n            defaultTitle={'사용 기술'}\n            id={'project-filter-tags'}\n          />\n          <Filter\n            filterHandler={typeHandler}\n            data={types}\n            defaultTitle={'프로젝트 유형'}\n            id={'project-filter-types'}\n          />\n          <Filter\n            filterHandler={statusHandler}\n            data={status}\n            defaultTitle={'진행 상황'}\n            id={'project-filter-status'}\n          />\n        </div>\n        <div className={'list project-list'}>\n          {projects.map((value, index) => (\n            <Project data={value} key={index} />\n          ))}\n        </div>\n      </section>\n      <Overlay data={projects} />\n    </Layout>\n  );\n};\n\nexport default Projects;\n"],"sourceRoot":""}